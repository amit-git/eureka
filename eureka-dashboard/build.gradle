/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        mavenCentral()
        maven { url 'http://clojars.org/repo'  }
    }
    dependencies {
        classpath 'clojuresque:clojuresque:1.7.0'
    }
}

repositories { 
    mavenCentral()
    maven { url 'http://clojars.org/repo'  }
}

apply plugin: 'clojure'
clojure.aotCompile = true

uberjar.enabled = true

apply plugin:'application'
mainClassName = "eureka.dashboard.core__init"

dependencies {
    compile "com.netflix.karyon:karyon-governator:${karyon_version}"
    compile "com.netflix.karyon:karyon-archaius:${karyon_version}"

    compile 'org.eclipse.jetty:jetty-server:9.2.2.v20140723'
    compile 'org.eclipse.jetty:jetty-servlet:9.2.2.v20140723'
    compile 'org.eclipse.jetty.websocket:websocket-server:9.2.2.v20140723'
    compile "com.netflix.rxnetty:rx-netty:0.3.12"

    compile "http-kit:http-kit:2.1.18"
    compile 'org.clojure:clojure:1.5.1'
    compile 'org.clojure:data.json:0.2.3'
    compile 'org.clojure:core.async:0.1.267.0-0d7780-alpha'
    compile 'compojure:compojure:1.1.3'
    compile 'ring:ring-devel:1.1.6'
    compile 'com.netflix.rxjava:rxjava-clojure:0.20.4'

}

jar {
    manifest {
        name = 'eureka-dashboard'
        instruction 'Bundle-Vendor', 'Netflix'
        instruction 'Bundle-DocURL', 'https://github.com/Netflix/eureka'
        instruction 'Import-Package', '!org.junit,!junit.framework,!org.mockito.*,*'
    }
}

uberjar {
    manifest {
        attributes('Main-Class': 'eureka.dashboard.core')
    }
}



def nreplPort = 9999
configurations { nrepl  }
dependencies { nrepl 'org.clojure:tools.nrepl:0.2.1'  }
task nrepl(type: JavaExec) {
    classpath configurations.nrepl.asPath,
              project.sourceSets.main.clojure.srcDirs,
              project.sourceSets.test.clojure.srcDirs,
              sourceSets.main.runtimeClasspath
                  main = "clojure.main"
                  args '--eval', "(ns gradle-nrepl (:require [clojure.tools.nrepl.server :refer (start-server stop-server)]))",
              '--eval', "(println \"Starting nrepl server on port $nreplPort\")",
              '--eval', "(def server (start-server :port $nreplPort))"

}
// vim:ft=groovy
