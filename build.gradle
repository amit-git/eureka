/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

ext.githubProjectName = "eureka"

buildscript {
    repositories {
//        mavenLocal()
        mavenCentral() // maven { url 'http://jcenter.bintray.com' }
    }
    apply from: file('gradle/buildscript.gradle'), to: buildscript
}

allprojects {
    repositories {
//        mavenLocal()
        mavenCentral() // maven { url: 'http://jcenter.bintray.com' }
    }
}

apply from: file('gradle/convention.gradle')
apply from: file('gradle/maven.gradle')
//apply from: file('gradle/check.gradle')
apply from: file('gradle/license.gradle')
apply from: file('gradle/release.gradle')

apply plugin: 'idea'

subprojects {

    sourceCompatibility = JavaVersion.VERSION_1_6
    targetCompatibility = JavaVersion.VERSION_1_6

    group = "com.netflix.eureka"

    apply plugin: 'java'
    apply plugin: 'osgi'
    apply plugin: 'groovy'

    apply plugin: 'eclipse'
    apply plugin: 'idea'

    dependencies {
        compile "org.slf4j:slf4j-api:${slf4j_version}"

        testCompile "junit:junit:${junit_version}"
        testCompile "org.hamcrest:hamcrest-library:${hamcrest_version}"
        testCompile "org.easymock:easymock:${easymock_version}"
    }

    eclipse {
        classpath {
            // include 'provided' dependencies on the classpath
            plusConfigurations += configurations.provided

            downloadSources = true
            downloadJavadoc = true
        }
    }

    idea {
        module {
            // include 'provided' dependencies on the classpath
            scopes.PROVIDED.plus += configurations.provided
            scopes.PROVIDED.plus += configurations.provided
        }
    }

    tasks.withType(Javadoc).each {
        it.classpath = sourceSets.main.compileClasspath
    }
}

